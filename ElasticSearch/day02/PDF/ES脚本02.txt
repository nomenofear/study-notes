###################################### Bulk批量操作
# 创建索引
PUT person
{
  "mappings": {
    "properties": {
      "name": {
        "type": "keyword"
      },
      "age": {
        "type": "integer"
      },
      "address": {
        "type": "text",
        "analyzer": "ik_smart"
      }
    }
  }
}
# 添加2条测试文档
POST /person/_doc/1
{
  "name":"ID为 1号 的数据",
  "age":18,
  "address":"北京海淀区"
}

POST /person/_doc/2
{
  "name":"ID为 2号 的数据",
  "age":18,
  "address":"北京海淀区"
}


# 查询所有文档
GET person/_search

# 批量操作需求
# 1.删除1号
# 2.新增3号
# 3.更新2号 name为222号

POST _bulk
{"delete":{"_index":"person","_id":"1"}}
{"create":{"_index":"person","_id":"3"}}
{"name":"ID为 3号 的数据","age":18,"address":"北京"}
{"update":{"_index":"person","_id":"2"}}
{"doc":{"name":"222号"}}

############################################### ES高级查询
# 创建索引
# title:商品标题
# price:商品价格
# createTime:创建时间
# categoryName:分类名称。如：家电，手机
# brandName:品牌名称。如：华为，小米
# spec: 商品规格。如： spec:{"屏幕尺寸","5寸"，"内存大小","128G"}
# saleNum:销量
# stock:库存量


GET goods/_search
DELETE goods

PUT goods
{
  "mappings": {
    "properties": {
      "title": {
        "type": "text",
        "analyzer": "ik_smart"
      },
      "price": {
        "type": "double"
      },
      "createTime": {
        "type": "date"
      },
      "categoryName": {
        "type": "keyword"
      },
      "brandName": {
        "type": "keyword"
      },
      "spec": {
        "type": "object"
      },
      "saleNum": {
        "type": "integer"
      },
      "stock": {
        "type": "integer"
      }
    }
  }
}

# 添加一条测试文档

POST goods/_doc/1
{
  "title": "小米手机",
  "price": 1000,
  "createTime": "2019-12-01",
  "categoryName": "手机",
  "brandName": "小米",
  "saleNum": 3000,
  "stock": 10000,
  "spec": {
    "网络制式": "移动4G",
    "屏幕尺寸": "4.5"
  }
}

# 查询所有文档

GET /goods/_search

# 删除索引
DELETE /goods

# 根据ID进行查询
GET /goods/_doc/536563

# 查询所有
GET /goods/_search

# 条件查询
# 根据title查询
GET goods/_search
{
  "query": {
    "term": {
      "price": {
        "value": "1699"
      }
    }
  }
}


# 根据品牌名称查询
GET goods/_search
{
  "query": {
    "term": {
      "brandName": {
        "value": "三星"
      }
    }
  }
}

# 模糊查询
GET goods/_search
{
  "query": {
    "match": {
      "title": "钛金灰"
    }
  }
}


# 分页查询
# 默认情况下，es一次展示10条数据,通过from和size来控制分页
# 分页是在查询结果的基础上进行分页展示 所以只要有查询结果的都可以添加分页
# limit a , b;
# 通过页码  a = (当前页码-1)*每页显示的条数;

GET goods/_search
{
  "query": {
    "match_all": {}
  },
  "from": 100, 
  "size": 20
}

GET goods/_search
{
  "from": 0,
  "size": 3
}


# text：会分词，不支持聚合
# keyword：不会分词，将全部内容作为一个词条，支持聚合
# term查询：不会对查询条件进行分词
# 如果使用term查询的是未分词的字段相当于是MySQL中的 = 
# 如果使用term查询的是分词的字段相当于是MySQL中的 like %条件%
GET goods/_search
{
  "query": {
    "term": {
      "brandName": {
        "value": "华为"
      }
    }
  }
}

# categoryName没有分词存储 使用term查询的时候必须要完全匹配
GET goods/_search
{
  "query": {
    "term": {
      "categoryName": {
        "value": "华为"
      }
    }
  }
}

# match查询：
# 会对查询条件进行分词
# 然后将分词后的查询条件和词条进行等值匹配
# 默认取并集（OR）
# "operator": "and" 求交集
# match查询
GET goods/_search
{
  "query": {
    "match": {
      "title": {
        "query": "华为手机",
        "operator": "and"
      }
    }
  },
  "size": 500
}


# wildcard查询：
# 会对查询条件进行分词
# 可以使用通配符 ?（任意单个字符） 和  * （0个或多个字符）

# wildcard 查询。查询条件分词，模糊查询
GET goods/_search
{
  "query": {
    "wildcard": {
      "title": {
        "value": "华*"
      }
    }
  },"size": 500
}

GET /_analyze
{
  "text": ["华为手机"],
  "analyzer": "ik_max_word"
}


# 正则查询
GET goods/_search
{
  "query": {
    "regexp": {
      "title": "\\w+(.)*"
    }
  }
}

# 前缀查询
GET goods/_search
{
  "query": {
    "prefix": {
      "brandName": {
        "value": "中国"
      }
    }
  }
}


# 范围查询

GET goods/_search
{
  "query": {
    "range": {
      "price": {
        "gte": 2000,
        "lte": 3000
      }
    }
  },
  "sort": [
    {
      "price": {
        "order": "desc"
      }
    }
  ]
}

# queryString 多条件查询
# 会对查询条件进行分词
# 然后将分词后的查询条件和词条进行等值匹配
# 默认取并集（OR）
# 可以指定多个查询字段

GET goods/_search
{
  "query": {
    "query_string": {
      "fields": [ "title", "categoryName", "brandName" ],
      "query": "华为 OR 手机"
    }
  },"size": 70
}

# query_string：不识别query中的连接符（or 、and）
GET goods/_search
{
  "query": {
    "simple_query_string": {
      "fields": [
        "title",
        "categoryName",
        "brandName"
      ],
      "query": "华为 AND 手机"
    }
  }
}



# boolQuery：对多个查询条件连接。连接方式：
# must和filter配合使用时，max_score（得分）是显示的
# must 默认数组形式
# must（and）：条件必须成立
# must_not（not）：条件必须不成立
# should（or）：条件可以成立
# filter：条件必须成立，性能比must高。不会计算得分# 
# 得分:即条件匹配度,匹配度越高，得分越高



GET goods/_search
{
  "query": {
    "bool": {
      "must": [
        {
          "term": {
            "brandName": {
              "value": "华为"
            }
          }
        }
      ],
      "filter": [
        {
          "term": {
            "title": "手机"
          }
        },
        {
          "range": {
            "price": {
              "gte": 2000,
              "lte": 3000
            }
          }
        }
      ]
    }
  }
}


# 名称中包含(名称 小米的  而且  价格 > 3000) 或者 (品牌 苹果)
GET goods/_search
{
  "query": {
    "bool": {
      "should": [
        {
          "term": {
            "brandName": {
              "value": "苹果"
            }
          }
        },
        {
          "bool": {
            "must": [
              {
                "term": {
                  "title": {
                    "value": "小米"
                  }
                }
              },
              {
                "range": {
                  "price": {
                    "gte": 1000
                  }
                }
              }
            ]
          }
        }
      ]
    }
  },
  "size": 200
}



GET goods/_search
{
  "query": {
    "bool": {
      "filter": [
        {
          "term": {
            "brandName": {
              "value": "华为"
            }
          }
        }
      ]
    }
  }
}

# 名称中包含联通的
GET goods/_search
{
  "query": {
    "term": {
      "title": {
        "value": "联通"
      }
    }
  }
}

# 价格大于4000的 倒序排列
GET goods/_search
{
  "query": {
    "range": {
      "price": {
        "gt": 4000
      }
    }
  },
  "sort": [
    {
      "price": {
        "order": "desc"
      }
    }
  ]
}

# 分类是手机或者平板电视
GET goods/_search
{
  "query": {
    "bool": {
      "should": [
        {
          "term": {
            "categoryName": {
              "value": "手机"
            }
          }
        },
        {
          "term": {
            "categoryName": {
              "value": "平板电视"
            }
          }
        }
      ]
    }
  },
  "size": 2000
}

# 名称 分类 品牌 包含三星的
GET goods/_search
{
  "query": {
    "query_string": {
      "fields": ["title","categoryName","brandName"],
      "query": "三星"
    }
  },
  "size": 2000
}

# 品牌是华为 and 价格小于3000的
GET goods/_search
{
  "query": {
    "bool": {
      "must": [
        {
          "term": {
            "brandName": {
              "value": "华为"
            }
          }
        },
        {
          "range": {
            "price": {
              "lt": 3000
            }
          }
        }
      ]
    }
  },
  "sort": [
    {
      "price": {
        "order": "desc"
      }
    }
  ]
}


# (品牌是联想或者是三星的) 且 (价格小于3000)的
GET goods/_search
{
  "query": {
    "bool": {
      "filter": [
        {
          "range": {
            "price": {
              "lt": 3000
            }
          }
        },
        {
          "bool": {
            "should": [
              {
                "term": {
                  "brandName": {
                    "value": "联想"
                  }
                }
              },
              {
                "term": {
                  "brandName": {
                    "value": "三星"
                  }
                }
              }
            ]
          }
        }
      ]
    }
  },
  "sort": [
    {
      "price": {
        "order": "desc"
      }
    }
  ],
  "size": 2000
}




# 聚合查询
# 指标聚合：相当于MySQL的聚合函数。max、min、avg、sum等
# 桶聚合：相当于MySQL的 group by 操作。不要对text类型的数据进行分组，会失败。

GET goods/_search
{
  "query": {
    "term": {
      "categoryName": "手机"
    }
  },
  "aggs": {
    "max_price": {
      "max": {
        "field": "price"
      }
    }
  }
}

# 桶聚合  分组

GET goods/_search
{
  "query": {
    "match": {
      "title": "手机"
    }
  },
  "aggs": {
    "goods_brands": {
      "terms": {
        "field": "brandName",
        "size": 100
      }
    }
  }
}


# 高亮三要素：
# 高亮字段
# 前缀
# 后缀
#
# 默认前后缀 ：<em></em>

GET goods/_search
{
  "query": {
    "match": {
      "title": "电视"
    }
  },
  "highlight": {
    "fields": {
      "title": {
        "pre_tags": "<span>",
        "post_tags": "</span>"
      }
    }
  }
}



############################################ 重建索引 

# 查询别名 默认别名无法查看，默认别名同索引名
GET goods/_alias/


# 新建student_index_v1。索引名称必须全部小写

PUT student_index_v1
{
  "mappings": {
    "properties": {
      "birthday": {
        "type": "date"
      }
    }
  }
}

GET student_index_v1

PUT student_index_v1/_doc/1
{
  "birthday": "1999-11-11"
}


GET student_index_v1/_search


PUT student_index_v1/_doc/1
{
  "birthday": "1999年11月11日"
}

# 业务变更了，需要改变birthday字段的类型为text
# 1. 创建新的索引 student_index_v2
# 2. 将student_index_v1 数据拷贝到 student_index_v2

# 创建新的索引 student_index_v2

PUT student_index_v2
{
  "mappings": {
    "properties": {
      "birthday": {
        "type": "text"
      }
    }
  }
}

# 将student_index_v1 数据拷贝到 student_index_v2
# _reindex 拷贝数据

POST _reindex
{
  "source": {
    "index": "student_index_v1"
  },
  "dest": {
    "index": "student_index_v2"
  }
}

GET student_index_v2/_search



PUT student_index_v2/_doc/2
{
  "birthday": "1999年11月11日"
}



# 思考： 现在java代码中操作es，还是使用的实student_index_v1老的索引名称。
# 1. 改代码（不推荐）
# 2. 索引别名（推荐）

# 步骤：
# 先删除student_index_v1
DELETE student_index_v1

# 给student_index_v2起个别名 student_index_v1
POST student_index_v2/_alias/student_index_v1


GET student_index_v1/_search
GET student_index_v2/_search


